<?php

/**
 * BaseActivity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property integer $subject_id
 * @property string $description
 * @property timestamp $time_from
 * @property timestamp $time_till
 * @property string $location
 * @property integer $organizer_id
 * @property string $poster
 * @property string $invitation
 * @property string $reminder
 * @property timestamp $reminder_time
 * @property string $confirmation
 * @property string $payment_type_ids
 * @property timestamp $expires_at
 * @property ActSubject $ActSubject
 * @property sfGuardUser $User
 * @property Doctrine_Collection $Images
 * @property Doctrine_Collection $Fees
 * @property Doctrine_Collection $FeeGroups
 * @property Doctrine_Collection $UserActivity
 * @property Doctrine_Collection $Comment
 * 
 * @method string              getName()            Returns the current record's "name" value
 * @method integer             getSubjectId()       Returns the current record's "subject_id" value
 * @method string              getDescription()     Returns the current record's "description" value
 * @method timestamp           getTimeFrom()        Returns the current record's "time_from" value
 * @method timestamp           getTimeTill()        Returns the current record's "time_till" value
 * @method string              getLocation()        Returns the current record's "location" value
 * @method integer             getOrganizerId()     Returns the current record's "organizer_id" value
 * @method string              getPoster()          Returns the current record's "poster" value
 * @method string              getInvitation()      Returns the current record's "invitation" value
 * @method string              getReminder()        Returns the current record's "reminder" value
 * @method timestamp           getReminderTime()    Returns the current record's "reminder_time" value
 * @method string              getConfirmation()    Returns the current record's "confirmation" value
 * @method string              getPaymentTypeIds()  Returns the current record's "payment_type_ids" value
 * @method timestamp           getExpiresAt()       Returns the current record's "expires_at" value
 * @method ActSubject          getActSubject()      Returns the current record's "ActSubject" value
 * @method sfGuardUser         getUser()            Returns the current record's "User" value
 * @method Doctrine_Collection getImages()          Returns the current record's "Images" collection
 * @method Doctrine_Collection getFees()            Returns the current record's "Fees" collection
 * @method Doctrine_Collection getFeeGroups()       Returns the current record's "FeeGroups" collection
 * @method Doctrine_Collection getUserActivity()    Returns the current record's "UserActivity" collection
 * @method Doctrine_Collection getComment()         Returns the current record's "Comment" collection
 * @method Activity            setName()            Sets the current record's "name" value
 * @method Activity            setSubjectId()       Sets the current record's "subject_id" value
 * @method Activity            setDescription()     Sets the current record's "description" value
 * @method Activity            setTimeFrom()        Sets the current record's "time_from" value
 * @method Activity            setTimeTill()        Sets the current record's "time_till" value
 * @method Activity            setLocation()        Sets the current record's "location" value
 * @method Activity            setOrganizerId()     Sets the current record's "organizer_id" value
 * @method Activity            setPoster()          Sets the current record's "poster" value
 * @method Activity            setInvitation()      Sets the current record's "invitation" value
 * @method Activity            setReminder()        Sets the current record's "reminder" value
 * @method Activity            setReminderTime()    Sets the current record's "reminder_time" value
 * @method Activity            setConfirmation()    Sets the current record's "confirmation" value
 * @method Activity            setPaymentTypeIds()   Sets the current record's "payment_type_ids" value
 * @method Activity            setExpiresAt()       Sets the current record's "expires_at" value
 * @method Activity            setActSubject()      Sets the current record's "ActSubject" value
 * @method Activity            setUser()            Sets the current record's "User" value
 * @method Activity            setImages()          Sets the current record's "Images" collection
 * @method Activity            setFees()            Sets the current record's "Fees" collection
 * @method Activity            setFeeGroups()       Sets the current record's "FeeGroups" collection
 * @method Activity            setUserActivity()    Sets the current record's "UserActivity" collection
 * @method Activity            setComment()         Sets the current record's "Comment" collection
 * 
 * @package    haimeeAct
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseActivity extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('activity');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('subject_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('description', 'string', 4055, array(
             'type' => 'string',
             'length' => 4055,
             ));
        $this->hasColumn('time_from', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('time_till', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('location', 'string', 2550, array(
             'type' => 'string',
             'length' => 2550,
             ));
        $this->hasColumn('organizer_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('poster', 'string', 2550, array(
             'type' => 'string',
             'length' => 2550,
             ));
        $this->hasColumn('invitation', 'string', 2550, array(
             'type' => 'string',
             'length' => 2550,
             ));
        $this->hasColumn('reminder', 'string', 2550, array(
             'type' => 'string',
             'length' => 2550,
             ));
        $this->hasColumn('reminder_time', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('confirmation', 'string', 2550, array(
             'type' => 'string',
             'length' => 2550,
             ));
        $this->hasColumn('payment_type_ids', 'string', 255, array(
             'type' => 'string',
			 'length' => 255,
             ));
        $this->hasColumn('expires_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
		$this->hasColumn('max_attenders', 'string', 255, array(
             'type' => 'integer',
             ));	
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ActSubject', array(
             'local' => 'subject_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as User', array(
             'local' => 'organizer_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Image as Images', array(
             'local' => 'id',
             'foreign' => 'activity_id'));

        $this->hasMany('Fee as Fees', array(
             'local' => 'id',
             'foreign' => 'activity_id'));

        $this->hasMany('FeeGroup as FeeGroups', array(
             'local' => 'id',
             'foreign' => 'activity_id'));

        $this->hasMany('UserActivity', array(
             'local' => 'id',
             'foreign' => 'activity_id'));

        $this->hasMany('Comment', array(
             'local' => 'id',
             'foreign' => 'activity_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}