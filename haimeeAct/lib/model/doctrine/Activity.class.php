<?php

/**
 * Activity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    haimeeAct
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Activity extends BaseActivity
{
    public function hasFeeCreated()
	{
		$q = Doctrine_Query::create()
			->from('Fee f')
			->where('f.activity_id = ?', $this->getId());

		return $q->execute()->count();
	}

    public function getMandatoryFees()
	{
		$q = Doctrine_Query::create()
			->from('Fee f')
			->where('f.activity_id = ?', $this->getId())
			->andWhere('f.fee_type_id = ?', 1);

		return $q->execute();
	}

	public function getOptionalFees()
	{
		$q = Doctrine_Query::create()
			->from('Fee f')
			->where('f.activity_id = ?', $this->getId())
			->andWhere('f.fee_type_id = ?', 2);

		return $q->execute();
	}

    public function getGroupFees()
	{
		$group_fees = array();

		//$q = Doctrine_Query::create()
		//	->from('Fee f')
		//	->where('f.fee_group_id IN (SELECT g.fee_group_id FROM Fee g WHERE g.activity_id = ? AND g.fee_type_id = ? GROUP BY g.fee_group_id)', array($this->getId(), 3));
        
	    $fees = Doctrine_Query::create()
			->select('f.fee_group_id')
			->from('Fee f')
			->where('f.activity_id = ?', $this->getId())
			->andWhere('f.fee_type_id = ?', 3)
			->andWhere('f.fee_group_id IS NOT NULL')
			->groupBy('f.fee_group_id')->execute();
        
		foreach($fees as $fee)
		{
			$q = Doctrine_Query::create()
				    ->from('Fee f')
				    ->where('f.fee_group_id = ?', $fee->getFeeGroupId());

			$group_fee['fee_group'] = $fee->getFeeGroup();
			$group_fee['fees'] = $q->execute();
			array_push($group_fees, $group_fee);
		}

		return $group_fees;
	}

    public function getAttenders($num = null)
	{
        if($num)
		{
		  /*
          $q = Doctrine_Query::create()
			->from('sfGuardUser u')
			->where('u.id IN (SELECT a.user_id FROM UserActivity a WHERE a.activity_id = ? AND a.quit_time IS NULL)', $this->getId())
			->limit($num);
          */

		  $q = Doctrine_Query::create()
			->select('s.*')
			->from('sfGuardUser s')
			->leftJoin('s.UserActivities u')
			->where('u.activity_id = ? AND u.quit_time IS NULL', $this->getId())
			->orderBy('u.enter_time DESC')
			->limit($num);

		}else{
			
		  $q = Doctrine_Query::create()
			->select('s.*')
			->from('sfGuardUser s')
			->leftJoin('s.UserActivities u')
			->where('u.activity_id = ? AND u.quit_time IS NULL', $this->getId())
			->orderBy('u.enter_time DESC');
		}

        return $q->execute();
	}
	
	public function getAttendersEmail()
	{
        $attenders =	$this->getAttenders();
		$total = array();
		foreach($attenders as $attender){
			if(strlen($attender->getEmailAddress()) > 0){
				$total[] = $attender->getEmailAddress();				
			}
		}
		
		if($org = $this->getUser()){
			if(strlen($org->getEmailAddress()) > 0){
				$total[] = $org->getEmailAddress();
			}
		}
		
		return $total;
	}
	
	public function getOrganizer(){
		return $this->getUser();
	}
	
	/*this one consider one user with more than one attend amounts */
	public function getAttendersTotalNum(){
				
		$q = Doctrine_Query::create()
			->select('s.*')
			->from('UserActivity s')
			->leftJoin('sfGuardUser u')
			->where('s.activity_id = ? AND s.quit_time IS NULL', $this->getId());
				
		$records =	$q->execute();
		$total = 0;	
		foreach($records as $record){
			$total += $record->getAmount();
		}
		return $total;
	}
	public function getRemainAttendersNum(){
		$remain = $this->getMaxAttenders() - $this->getAttendersTotalNum();
		return $remain;
	}
	public function getComments()
	{
		$q = Doctrine_Query::create()
			->from('comment c')
			->where('c.activity_id = ?', $this->getId())
			->orderBy('c.time DESC');

        return $q->execute();
	}

	public function getCommentsLength()
	{
		$comments = $this->getComments();

        return count($comments);
	}
	
	public function getCommentsWithLimit($limit = 10)
	{
		$q = Doctrine_Query::create()
			->from('comment c')
			->where('c.activity_id = ?', $this->getId())
			->orderBy('c.time DESC')
			->limit($limit);

        return $q->execute();
	}
	
    public function getMinFee()
	{
	  $mandatory_fees = $this->getMandatoryFees();
      $group_fees = $this->getGroupFees();
	  $min_fee = 0;

	  foreach($mandatory_fees as $mandatory_fee)
	  {
		$min_fee += $mandatory_fee->getPrice();
	  }

	  foreach($group_fees as $group_fee)
	  {
	    $min_group_fee = PHP_INT_MAX;
        foreach($group_fee['fees'] as $fee)
		{
		  $c_fee = $fee->getPrice();
          $min_group_fee = ($min_group_fee - $c_fee) > 0  ? $c_fee : $min_group_fee;
		}
		$min_fee += $min_group_fee;
	  }

	  return $min_fee;
	}

	public function getPaymentTypes()
	{
	  $payment_type_ids = $this->getPaymentTypeIds();
	  if(!$payment_type_ids){
		return null;
	}
	  $q = Doctrine_Query::create()
			->from('PaymentType p')
			->where('p.id IN ('.$payment_type_ids.')');

	  return $q->execute();
	}
	
	public function getDescriptionTruncated(){
		// Original PHP code by Chirp Internet: www.chirp.com.au 
		$string = strip_tags($this->getDescription());
		$limit = 100;
						if(strlen($string) >= $limit)  {
							$string = mb_substr($string, 0, $limit,'UTF-8') . '...';
						}
		return $string;
	}
	
	public function showFormTillTime($isHideDayDiff = false){
		$returnString = '';
		
		if($this->getTimeFrom()){
			$returnString = $returnString . '<div style="display: inline-block;float: left;height: 34px;padding: 4px;">';
			$returnString = $returnString . $this->getDateTimeObject('time_from')->format('M j (D)');
			
			if($this->getDateTimeObject('time_from')->format('F j') != $this->getDateTimeObject('time_till')->format('F j')){
				$returnString = $returnString.' <span class="time">'.$this->getDateTimeObject('time_from')->format('g:i a').'</span>';
				$returnString = $returnString.' to<br/>';
				$returnString = $returnString.' '.$this->getDateTimeObject('time_till')->format('M j (D)');
			}else{
				$returnString = $returnString.' <br/><span class="time">'.$this->getDateTimeObject('time_from')->format('g:i a').'</span>';
				$returnString = $returnString.' to';
			}
			$returnString = $returnString.' <span class="time">'.$this->getDateTimeObject('time_till')->format('g:i a').'</span>';
			
			$returnString = $returnString . '</div>';
			
			if(!$isHideDayDiff){
				
			
				$now = new DateTime();
				$day_diff = round(($this->getDateTimeObject('time_from')->format( 'U' ) - $now->format( 'U' ))/86400);
			
				if($day_diff > 0 && $day_diff < 90){
					$day_diff_string = 'in '.$day_diff.' day';
					if($day_diff > 1){
						$day_diff_string = $day_diff_string . 's';
					}
					if($day_diff > 7 && $day_diff < 31){
						$day_diff_string = 'in '.round($day_diff/7).' week';
						if(round($day_diff/7) > 1){
							$day_diff_string = $day_diff_string . 's';
						}
					}else if($day_diff >= 31){
						$day_diff_string = 'in '.round($day_diff/30).' month';
						if(round($day_diff/30) > 1){
							$day_diff_string = $day_diff_string . 's';
						}
					}
													
					$returnString = $returnString .'<div style="background-color: #aaa;border-radius: 9px;color: white;display: inline-block;float: left;margin-top: 7px;padding: 3px 5px;">';
					$returnString = $returnString . $day_diff_string;
					$returnString = $returnString . '</div>';
				
				}
			}
		}else{
			$returnString = $returnString . 'coming soon';
		}
		
		
		//$returnString = $returnString . '</div>';
		return   $returnString;
	}
	
	public function showCost(){
		$returnString = '';
		$fee = $this->getMinFee();
		if($fee == 0 ){
			$returnString = 'Free';
		}else{
			$returnString = '<a class="no-decoration" href="'.url_for('activity_fee_show', $this).'">&euro; '.$fee.'</a>';
		}

		return $returnString;
	}
	
	public function getStatus(){
		$returnState = '';
		$today = new DateTime();
		if($today > $this->getDateTimeObject('time_till')){
			$returnState = 'expired';
		}
		return $returnState;
	}
	
	public function getSmallPoster(){
		$image = $this->getPoster();
		if($image){
			$pathInfo = pathinfo(sfConfig::get('sf_upload_dir').'/activities/'.$image);
			$newFileName = $pathInfo['filename'].'-s.'.$pathInfo['extension'];
			$save = $pathInfo['dirname'].'/'.$newFileName;
			//sfContext::getInstance()->getLogger()->info('detect file:'. $save );
			if(file_exists($save)){
				$image = $newFileName;
			}
			
		}
		
		return  $image;
	}
	public function getAvarageRating(){
		$q = Doctrine_Query::create()
			->select('AVG(s.rating) AS rating_avg')
			->from('UserActivity s')
			->leftJoin('sfGuardUser u')
			->where('s.activity_id = ? AND s.quit_time IS NULL AND s.rating IS NOT NULL', $this->getId());
		
		$average = $q->fetchOne();
		return number_format((float)$average['rating_avg'], 1, '.', '');
	}
}